;; Expected result: 92
(letrec ((append (lambda (l x) (let ((_45 (null? l))) (if _45 x (let ((_46 (car l))) (let ((_47 (cdr l))) (let ((_48 (append _47 x))) (let ((_49 (cons _46 _48))) _49))))))))) (letrec ((one-to (lambda (n) (letrec ((loop (lambda (i l) (let ((_50 (= i 0))) (if _50 l (let ((_51 (- i 1))) (let ((_52 (cons i l))) (let ((_53 (loop _51 _52))) _53)))))))) (let ((_54 (quote ()))) (let ((_55 (loop n _54))) _55)))))) (letrec ((ok? (lambda (row dist placed) (let ((_56 (null? placed))) (if _56 #t (let ((_57 (car placed))) (let ((_58 (+ row dist))) (let ((_59 (= _57 _58))) (let ((_60 (not _59))) (let ((_61 (car placed))) (let ((_62 (- row dist))) (let ((_63 (= _61 _62))) (let ((_64 (not _63))) (let ((_65 (+ dist 1))) (let ((_66 (cdr placed))) (let ((_67 (ok? row _65 _66))) (let ((_68 (and _60 _64 _67))) _68))))))))))))))))) (letrec ((try-it (lambda (x y z) (let ((_69 (null? x))) (if _69 (let ((_70 (null? y))) (if _70 1 0)) (let ((_71 (car x))) (let ((_72 (ok? _71 1 z))) (let ((_73 (cdr x))) (let ((_74 (car x))) (let ((_75 (cons _74 y))) (let ((_76 (try-it _73 _75 z))) (let ((_77 (+ (if _72 (try-it (append (cdr x) y) (quote ()) (cons (car x) z)) 0) _76))) _77)))))))))))) (letrec ((nqueens (lambda (n) (let ((_78 (one-to n))) (let ((_79 (quote ()))) (let ((_80 (quote ()))) (let ((_81 (try-it _78 _79 _80))) _81))))))) (nqueens 8))))))
