(define sq '((lambda (x) (* x x)) 8))
(define carry '(let ((c (cons 1 #f))) (car c)))
(define cdrry '(let ((c (cons 1 #f))) (cdr c)))
(define modpow (file->value "test/modpow.scm"))
(define litlist '(let ((u '(1 2 3))) (let ((v (cdr u))) (car v))))
(define litlist2 '(let ((x '(1 (2 3)))) (let ((y (cdr x))) (let ((z (car y))) (car z)))))
(define equal1 '(let ((x '(1 #f "ho"))) (let ((y '(1 #f "ho"))) (equal? x y))))
(define loopy1 '(letrec ((f (lambda () (f)))) (f)))
(define loopy2 '((lambda (x) (x x)) (lambda (y) (y y))))
(define safeloopy1 '(letrec ((count (lambda (n) (let ((t (= n 0))) (if t 123 (let ((u (- n 1))) (let ((v (count u))) v))))))) (count 8)))
(define hellomemo '(let ((f (lambda (x) x))) (let ((u (f 1))) (f 2))))
(define fac (file->value "test/fac.scm"))
(define fib (file->value "test/fib.scm"))
(define blur (file->value "test/blur.scm"))
(define eta (file->value "test/eta.scm"))
(define gcipd (file->value "test/gcipd.scm"))
(define kcfa2 (file->value "test/kcfa2.scm"))
(define kcfa3 (file->value "test/kcfa3.scm"))
(define loop2 (file->value "test/loop2.scm"))
(define mj09 (file->value "test/mj09.scm"))
(define rotate (file->value "test/rotate.scm"))
(define sat (file->value "test/sat.scm"))
(define rsa (file->value "test/rsa.scm"))
(define factor (file->value "test/factor.scm"))
(define primtest (file->value "test/primtest.scm"))
(define regex (file->value "test/regex.scm"))
(define cpstak (file->value "test/cpstak.scm"))
(define churchNums (file->value "test/churchNums.scm"))
(define nqueens (file->value "test/nqueens.scm"))
(define fib-mut (file->value "test/fib-mut.scm"))
(define account (file->value "test/account.scm"))